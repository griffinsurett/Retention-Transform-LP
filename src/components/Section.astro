---
/**
 * src/components/Section.astro
 *
 * This version retains dynamic querying and an optional “View All” button.
 * Instead of handling the item looping directly, it delegates that work to ItemsTemplate.
 *
 * Props:
 *  - collection: (string) E.g., "services", "projects", ... (optional)
 *  - query: (string) E.g., "getAll", "related", ... (optional)
 *  - component: (React component) Optional custom item component for ItemsTemplate
 *  - heading: (string) If provided, overrides the default heading
 *  - description: (string) If provided, overrides the meta description
 *  - ifButton: (boolean) Manually control if the "View All" button is present.
 *              When not provided and a collection exists, defaults to meta.hasPage.
 *              Otherwise, defaults to false.
 *  - buttonLink: (string) Custom link for the button (defaults to `/${collectionName}`)
 *  - sectionClass: (string) Additional classes for the <section> wrapper
 *  - itemClass: (string) Classes for the <ul> that wraps the <li> items (passed to ItemsTemplate)
 *  - contentClass: (string) Additional classes for a wrapping <div> inside the section for content styling.
 */

 import Heading from "./Heading.jsx";
// import Card from "./Card.jsx";
import Button from "./Button.jsx";
import ItemsTemplate from "./ItemsTemplate.jsx";
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";

const {
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  heading,
  description,
  ifButton,
  buttonLink,
  sectionClass,
  headingClass,
  descriptionClass,
  buttonClass,
  itemClass,
  contentClass,
  ...props
} = Astro.props;

// Generate a unique heading id if a heading exists
const headingId = heading ? (collectionName ? `section-heading-${collectionName}` : "section-heading") : null;

const finalButtonLink = buttonLink || `/${collectionName}`;
const isDynamic = Boolean(collectionName && queryType);

let meta = { description: "", hasPage: false };
if (isDynamic) {
  const { description: desc = "", hasPage = false, ...restMeta } = await getCollectionMeta(collectionName);
  meta = { description: desc, hasPage, ...restMeta };
}

const showButton =
  typeof ifButton === "boolean"
    ? ifButton
    : collectionName
    ? meta.hasPage
    : false;

const isCollectionRootPage =
  Astro.url.pathname === `/${collectionName}` ||
  Astro.url.pathname === `/${collectionName}/`;
const finalShowButton = showButton && !isCollectionRootPage;
---
{isDynamic ? (
  <section
    class={`${sectionClass} w-full flex justify-center items-center lg:px-15`}
    data-collection={collectionName}
    aria-labelledby={headingId}
    {...props}
  >
    <div class={`${contentClass} w-3/4`}>
      <div class={headingClass}>
        <Heading tagName="h2" id={headingId}>
          {heading ?? capitalize(collectionName)}
        </Heading>
        {(description || meta.description) && (
          <p class={descriptionClass}>{description ?? meta.description}</p>
        )}
      </div>
      <ItemsTemplate
        collection={collectionName}
        query={queryType}
        itemClass={itemClass}
        ItemComponent={ItemComponent}
        pathname={Astro.url.pathname}
      />
      {finalShowButton && (
        <Button href={finalButtonLink} classname="some-classes" ariaLabel={`View all ${capitalize(collectionName)}`}>
          View All {capitalize(collectionName)}
        </Button>
      )}
      <slot />
    </div>
  </section>
) : (
  <section
    class={`${sectionClass} w-full flex justify-center items-center lg:px-15`}
    aria-labelledby={headingId}
    {...props}
  >
    <div class={`${contentClass} w-3/4`}>
      {heading && (
        <Heading tagName="h2" className={headingClass} id={headingId}>
          {heading}
        </Heading>
      )}
      {description && <p class={descriptionClass}>{description}</p>}
      <slot />
      {finalShowButton && (
        <Button href={buttonLink} classname={`${buttonClass} mt-10`} ariaLabel="Learn More">
          Learn More
        </Button>
      )}
    </div>
  </section>
)}
